---
- name: Remove requiretty from sudoers
  connection: paramiko
  ansible.builtin.lineinfile:
    path: /etc/sudoers
    state: absent
    regexp: ^\s*Defaults\s+requiretty$
    validate: /usr/sbin/visudo -cf %s
  when: ansible_connection != "local"

- name: Explicitly gather facts
  ansible.builtin.setup:

- name: Set hostname
  ansible.builtin.hostname:
    name: am-static-site

- name: Update and upgrade system packages
  ansible.builtin.apt:
    update_cache: true
    upgrade: dist
    state: present

- name: Install required packages
  ansible.builtin.apt:
    name: "{{ item }}"
  loop:
    - git
    - python3-pip
    - python3
    - nginx

- name: Configure Fail2Ban
  ansible.builtin.copy:
    dest: /etc/fail2ban/jail.local
    content: |
      [sshd]
      enabled = true
      banaction = iptables-multiport
    mode: preserve
  notify: Restart Fail2Ban

- name: Enable Fail2Ban service
  ansible.builtin.systemd:
    name: fail2ban
    enabled: true
    state: started

- name: Configure UFW rules
  community.general.ufw:
    rule: allow
    name: "{{ item }}"
  loop:
    - OpenSSH
    - 'Nginx Full'

- name: Enable UFW
  community.general.ufw:
    state: enabled

- name: Allow user to have passwordless sudo
  ansible.builtin.lineinfile:
    path: /etc/sudoers.d/{{ common_username }}
    line: "{{ common_username }} ALL=(ALL) NOPASSWD: ALL"
    # Older systems require this to be 0440 or sudo breaks.
    mode: "0440"
    create: true
    validate: /usr/sbin/visudo -cf %s

- name: Create user
  ansible.builtin.user:
    name: ${{ common_username }}
    groups:
      "{{ 'wheel' if ansible_facts['os_family'] == 'RedHat' else '' }}"
    shell: /bin/bash
    home: "/home/{{ common_username }}"

- name: Grant sudo privileges to user
  ansible.builtin.copy:
    dest: /etc/sudoers.d/{{ common_username }}
    content: "{{ common_username }} ALL=(ALL) NOPASSWD:ALL\n"
    owner: root
    group: root
    mode: '0440'
  become: true

- name: Create authorized_keys for user
  become: true
  become_user: 'root'
  ansible.posix.authorized_key:
    user: ${{ common_username }}
    path: "/home/{{ common_username }}/.ssh/authorized_keys"
    key: |
      {{ lookup('file', 'common_username.pub') }}
    exclusive: true
