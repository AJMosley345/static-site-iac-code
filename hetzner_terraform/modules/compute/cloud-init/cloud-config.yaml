#cloud-config
# Creates the user ansible for configuration with ansible playbooks
users:
- name: ansible
  groups: users, admin
  sudo: ALL=(ALL) NOPASSWD:ALL
  shell: /bin/bash
  ssh_authorized_keys:
    - ${ansible_user_ssh_key}

# Writes the ssh hardening config to a separate file for better management
write_files:
  - path: /etc/ssh/sshd_config.d/hardening.conf
    content: |
      PermitRootLogin no
      PasswordAuthentication no
      KbdInteractiveAuthentication no
      ChallengeResponseAuthentication no
      MaxAuthTries 2
      AllowTcpForwarding no
      X11Forwarding no
      AllowAgentForwarding no
      AuthorizedKeysFile .ssh/authorized_keys
      AllowUsers ${personal_user} ansible
packages:
  - jq
runcmd:
  - curl -fsSL https://tailscale.com/install.sh | sh
  - tailscale up --auth-key=${tailscale_tailnet_key} --ssh
  # Get current IP of Tailscale and potential "old" IP
  - TAILSCALE_IP=$(tailscale ip -4)
  # Get the Tailscale device id of the newly created device so the properties can be updated. Also get the "old/outdated" id
  - TAILSCALE_DEVICE_ID=$(tailscale whois --json $${TAILSCALE_IP}:22 | jq -r .Node.StableID)
  - >
    DEVICE_INFO=$(curl -s -H "Authorization: Bearer ${tailscale_api_token}" "https://api.tailscale.com/api/v2/tailnet/-/devices")
  # Find the old node by name (replace ${server_name} with the old server's name)
  - OLD_DEVICE_ID=$(echo "$DEVICE_INFO" | jq -r '.devices[] | select(.hostname=="'"${server_name}"'") | .nodeId')
  # Do a check to compare the values and delete the old server
  - >  
    if [[ -n "$$OLD_DEVICE_ID" ]]; then
      echo "Old device found with ID: $$OLD_DEVICE_ID"

      # Remove the old device
      curl -X DELETE -H "Authorization: Bearer ${tailscale_api_token}" "https://api.tailscale.com/api/v2/device/$${OLD_DEVICE_ID}"
      
      # Rename current device to the name defined in server_name
      curl \
      -X POST \
      -H "Authorization: Bearer ${tailscale_api_token}" \
      -H 'Content-Type: application/json' \
      "https://api.tailscale.com/api/v2/device/$${TAILSCALE_DEVICE_ID}/name" \
      -d '{"name": "${server_name}"}'

      echo "Old device removed and new device renamed."
    else
      echo "No old device found for hostname ${server_name}."
    fi
  # Set the new device to have a static ip (defined in the Terraform variables) so that ansible finds the correct host.
  - >
    curl \
      -X POST \
      -H 'Authorization: Bearer ${tailscale_api_token}' \
      -H 'Content-Type: application/json' \
      "https://api.tailscale.com/api/v2/device/$${TAILSCALE_DEVICE_ID}/ip" \
      -d '{"ipv4": "${tailscale_static_ip}"}'
  - >
    curl -L \
      -X POST \
      -H "Accept: application/vnd.github+json" \
      -H "Authorization: Bearer ${github_pa_token}" \
      -H "X-GitHub-Api-Version: 2022-11-28" \
      https://api.github.com/repos/${repo_name}/actions/workflows/${workflow_id}/dispatches \
      -d '{"ref": "main"}'